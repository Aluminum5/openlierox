#!/usr/bin/python -u

# Dedicated Control handler script for OpenLieroX
# (http://openlierox.sourceforge.net)

# We're expecting this file to be run from "scripts" dir - that's from rev. 3260 or so
# TODO: NO, we are not expecting this!
# It was only done because this script is buggy and does not work otherwise.

import os, sys, time

# Add current dir to module search path
sys.path.append(os.getcwd())

# Add dir with config file to module search path
try:
	os.listdir(os.getenv("HOME")+"/.OpenLieroX/cfg")
	sys.path.append(os.getenv("HOME")+"/.OpenLieroX/cfg")
except:
	pass

try:
	os.listdir(os.getenv("USERPROFILE")+"/My Documents/OpenLieroX/cfg") # TODO: lame, use Win32 API
	sys.path.append(os.getenv("USERPROFILE")+"/My Documents/OpenLieroX/cfg")
except:
	pass

try:
	os.listdir(os.getcwd()+"/../cfg")
	sys.path.append(os.getcwd()+"/../cfg")
except:
	pass

try:
	os.listdir("/etc/OpenLieroX/cfg")
	sys.path.append("/etc/OpenLieroX/cfg")
except:
	pass

sys.path.append(os.getcwd()) # Append current dir to Python imports search paths
import dedicated_control_handler as hnd # control handler
import dedicated_config as cfg # Per-host config like admin password
import dedicated_control_io as io # control handler

## The game loop ##

hnd.init()

io.msg("GameState = %s" % str(hnd.gameState))
io.messageLog("Dedicated_control started",io.LOG_INFO)

# Allow the user to log in using the /login command
io.setvar("GameOptions.Network.Password", cfg.ADMIN_PASSWORD)  # TODO: this is visible in dedicated server output

io.startLobby(cfg.SERVER_PORT)

hnd.waitLobbyStarted()

for f in cfg.GLOBAL_SETTINGS.keys():
	io.setvar( f, cfg.GLOBAL_SETTINGS[f] )

hnd.selectNextPreset()

# nice state-machine for dedicated server
#pingTime = time.time()
while hnd.gameState != hnd.GAME_QUIT:

	time.sleep(1)

	hnd.oldGameState = hnd.gameState
	# It's possible to create a deadlock here, depending on how you act on the signals.(Perhaps thread it as albert suggests?)
	# Loops through all the signals, and once we are out of all signals, continue on to the standard loop
	while hnd.signalHandler(io.getSignal()):
		pass # Continue with the next iteration

	if not hnd.scriptPaused:
		hnd.controlHandler()
		
	#if time.time() - pingTime > 40:
	#	io.messageLog("Python still alive", io.LOG_INFO)
	#	pingTime = time.time()

io.messageLog("GameState is QUIT. Exiting.",io.LOG_INFO)
sys.exit() # Kill the stdin-input thread
