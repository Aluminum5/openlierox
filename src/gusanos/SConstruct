###
# Vermes
# Scons build file
# See INSTALL for instructions
###
import os
from glob import glob

###
# Create an environment
###
env = Environment()
libs = []

###
# Force toolset under Windows
###
if env['PLATFORM'] == 'win32':
	env = Environment(tools = ['mingw'])
	print "Forcing MinGW - MSVC++ not supported"


env.Append(CPPPATH = ['src', '../../include', '/usr/include/libxml2'])
env.ParseConfig("sdl-config --cflags --libs")

###
# The default program to build is vermes
###
env.Default('vermes' + env['PROGSUFFIX'])

###
# Libraries to be built from source
###
libs += ['omfgconsole', 'omfghttp', 'omfgutil', 'omfgui', 'omfgscript',
			'loadpng', 'glua', 'openlierox']

###
# Libraries to be picked up from the system
###
libs += ['SDL', 'SDL_image', 'boost_filesystem', 'boost_signals', 'png', 'z', 'alut',
			'openal', 'vorbisfile', 'xml2', 'crypto']

env.Append(CCFLAGS = '-ggdb -Wall')
env.Append(CCFLAGS = '-DDEBUG')

###
# Build the source libraries
###
env.StaticLibrary('omfgconsole', glob('src/console/*.cpp'))
env.StaticLibrary('omfghttp', glob('src/http/*.cpp'))
env.StaticLibrary('omfgutil', glob('src/util/*.cpp'))
env.StaticLibrary('omfgscript', glob('src/omfgscript/*.cpp'))
env.StaticLibrary('loadpng', glob('src/loadpng/*.c'))
env.StaticLibrary('omfgui', glob('src/gui/detail/*.cpp')
								+ glob('src/gui/lua/*.cpp'))
env.StaticLibrary('glua', glob('src/lua51/*.c') 
							+ glob('src/lua51/luaapi/*.cpp'))


#breakpad
#hawknl
#sdlimage

olxfiles = [
	"SystemFunctions.cpp",
	"ConfigHandler.cpp",
	"IniReader.cpp",
	"CScriptableVars.cpp",
	"Timer.cpp",
	"EventQueue.cpp",
	"MainGlobals.cpp",
	"TeeStdoutHandler.cpp",
	"Mutex.cpp",
	"Networking.cpp",
	"TaskManager.cpp",
	"ThreadPool.cpp",
	"Unicode.cpp",
	"Version.cpp",
	"SMTP.cpp",
	"CrashHandler.cpp",
	"StringBuf.cpp",
	"Debug.cpp",
	"StringUtils.cpp",
	"FindFile.cpp" ]

def findFullOlxFn(fn):
	olxsrcdir = ".."
	for root, _, files in os.walk(olxsrcdir):
		if fn in files:
			return root + "/" + fn
	print "ERROR:", fn, "not found in OLX!"
	return None


env.StaticLibrary('openlierox',
	[findFullOlxFn(x) for x in olxfiles] +
	[ "../breakpad/ExtractInfo.cpp" ]
	)

env.Append(CCFLAGS = "-DNBREAKPAD")


###
# Build the main program
###
env.Program('vermes', glob('src/*.cpp') + glob('src/loaders/*.cpp')
						+ glob('src/lua/*.cpp') + glob('src/blitters/*.cpp')
						+ ['src/util/text.o']
					, LIBS = libs
					, LIBPATH = ['.', '/usr/local/lib', '/usr/lib'])

